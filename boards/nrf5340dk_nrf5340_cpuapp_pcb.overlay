/*
 * Copyright (c) 2019 Peter Bigot Consulting, LLC
 *
 * SPDX-License-Identifier: Apache-2.0
 */


/ {
    chosen {
        nordic,pm-ext-flash = &w25q128;
        zephyr,settings-partition = &lfs1;
        zephyr,console = &uart2;
       // zephyr,shell-uart = &uart2;
        zephyr,mmc = &sdhc;
    };

    aliases {
        rtc0 = &rtc0;
        spi1 = &spi1;
    };

    bq25185: bq25185 {
        compatible = "ti,bq25185";
        status = "okay";
        stat1-gpios = <&gpio1 5 GPIO_ACTIVE_HIGH>;  /* P1.05 */
        stat2-gpios = <&gpio1 6 GPIO_ACTIVE_HIGH>;  /* P1.06 */
    };

};


/delete-node/ &storage_partition;

/ {
    fstab {
        compatible = "zephyr,fstab";
        status = "okay";
        lfs1: lfs1 {
            compatible = "zephyr,fstab,littlefs";
            mount-point = "/lfs1";
            partition = <&lfs1_part>;
            read-size = <16>;
            prog-size = <16>;
            cache-size = <64>;
            lookahead-size = <32>;
            block-cycles = <512>;
        };

         sdhc_mount: sdhc_mount {
            compatible = "zephyr,fstab,fat";
            label = "SDCard";
            mount-point = "/sd";
            partition = <&sdmmc_part>;
        };
        };    
        
    };


/* Add QSPI configuration with new flash */
&qspi {
    status = "okay";
    pinctrl-0 = <&qspi_default>;
    pinctrl-1 = <&qspi_sleep>;
    pinctrl-names = "default", "sleep";
    
    /delete-node/ mx25r6435f@0;
    
    w25q128: w25q128jv@0 {
        compatible = "nordic,qspi-nor";
        reg = <0>;
        //sck-frequency = <133000000>; /* 133 MHz */
          sck-frequency = <36000000>; 
   
    
        
        jedec-id = [ef 40 18];

         size = <134217728>; /* 128 Mbit = 16 MB */
  /* Power management */
        has-dpd;
        t-enter-dpd = <3000>;   /* 3 µs to enter deep power-down */
        t-exit-dpd  = <30000>;  /* 30 µs to exit deep power-down */
        status = "okay";
        
        partitions {
            compatible = "fixed-partitions";
            #address-cells = <1>;
            #size-cells = <1>;

            lfs1_part: partition@0 {
                label = "storage";
                reg = <0x00000000 0x01000000>;
            };
        };
    };
};

&adc {
    status = "okay";
    compatible = "nordic,nrf-saadc";
    #address-cells = <1>;
    #size-cells = <0>;
    
    channel@0 {
        reg = <0>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,input-positive = <NRF_SAADC_AIN0>;
        zephyr,resolution = <14>;
    };
    
    channel@1 {
        reg = <1>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,input-positive = <NRF_SAADC_AIN1>;
        zephyr,resolution = <14>;
    };
    
    channel@2 {
        reg = <2>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,input-positive = <NRF_SAADC_AIN2>;
        zephyr,resolution = <14>;
    };
    
    channel@3 {
        reg = <3>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,input-positive = <NRF_SAADC_AIN3>;
        zephyr,resolution = <14>;
    };
    
    channel@4 {
        reg = <4>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,input-positive = <NRF_SAADC_AIN4>;
        zephyr,resolution = <14>;
    };
    
    channel@5 {
        reg = <5>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,input-positive = <NRF_SAADC_AIN5>;
        zephyr,resolution = <14>;
    };
    
    channel@6 {
        reg = <6>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,input-positive = <NRF_SAADC_AIN6>;
        zephyr,resolution = <14>;
    };
    
    channel@7 {
        reg = <7>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,input-positive = <NRF_SAADC_AIN7>;
        zephyr,resolution = <14>;
    };
};

&gpio0 {
    status = "okay";
};

&gpio1 {
    status = "okay";
};

&pwm0 {
    status = "disabled";
};

&timer0 {
    status = "disabled";   
};

&timer2 {
    status = "disabled";
};


&i2c3 {
    compatible = "nordic,nrf-twim";
    status = "okay";
    pinctrl-0 = <&i2c3_default>;
    pinctrl-1 = <&i2c3_sleep>;
    pinctrl-names = "default", "sleep";

    bq27441: bq27441@55 {
        compatible = "ti,bq274xx";
        reg = <0x55>;
        status = "okay";
        design-voltage = <3700>;
        design-capacity = <1800>;
        taper-current = <45>;
        terminate-voltage = <3000>;
        int-gpios = <&gpio0 23 GPIO_ACTIVE_HIGH>;
    };
};

&uart0 {
    status = "disabled";
};

&rtc0 {
    status = "okay";
};
&i2c1 {
    status = "disabled";
};

&spi2 {
    status = "disabled";
};

/* Enable UART2 for console/logging */
&uart2 {
    compatible = "nordic,nrf-uarte";
    status = "okay";
    current-speed = <115200>;
    parity= "none";
    stop-bits = "1";
    pinctrl-0 = <&uart2_default_pcb>;
    pinctrl-1 = <&uart2_sleep_pcb>;
    pinctrl-names = "default", "sleep";
};


/* Enable SPI4 for SD card */
&spi4 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    cs-gpios = <&gpio0 11 GPIO_ACTIVE_LOW>;
    pinctrl-0 = <&spi4_default>;
    pinctrl-1 = <&spi4_sleep>;
    pinctrl-names = "default", "sleep";
    
    // SD Card device node
    sdhc: sdhc@0 {
        compatible = "zephyr,sdhc-spi-slot";
        status = "okay";
        reg = <0>;
        label = "SDHC";
        
        sdmmc {
			compatible = "zephyr,sdmmc-disk";
			disk-name = "SD";
			status = "okay";

            partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        sdmmc_part: partition@0 {
            label = "storage_sd";
            reg = <0x00000000 0x00906000>;
        };
    };
		}; 
        spi-max-frequency = <20000000>; // 20 MHz
    
    };
};



&spi1 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    pinctrl-0 = <&spi1_default_alt>;
    pinctrl-1 = <&spi1_sleep_alt>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio1 15 GPIO_ACTIVE_LOW>; // CS on P1.15
    label = "spi1";

    bhi360: bhi360@0 {
        compatible = "bosch,bhi360";
        status = "okay";
        reg = <0>;
        spi-max-frequency = <8000000>;
        int-gpios = <&gpio1 10 GPIO_ACTIVE_HIGH>;   // INT on P1.10
        reset-gpios = <&gpio1 11 GPIO_ACTIVE_LOW>;  // Optional: RESET on P1.11
        label = "BHI360";
    };
};


/* Force LDO mode on all regulators of nRF5340 */
//&vregmain {
  //  status = "okay";
	//regulator-initial-mode = <NRF5X_REG_MODE_DCDC>;
//    regulator-initial-mode = <NRF5X_REG_MODE_LDO>;
//};

//&vregradio {
  //  status = "okay";
//	regulator-initial-mode = <NRF5X_REG_MODE_DCDC>;
//     regulator-initial-mode = <NRF5X_REG_MODE_LDO>; 
//};

//&vregh {
//	status = "okay"; //comment out to disable dcdc
//};

&pinctrl {
    i2c3_default: i2c3_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 2)>,    /* P1.02 as SDA */
                    <NRF_PSEL(TWIM_SCL, 1, 3)>;    /* P1.03 as SCL */
        };
    };

    i2c3_sleep: i2c3_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 2)>,
                    <NRF_PSEL(TWIM_SCL, 1, 3)>;
            low-power-enable;
        };
    };

    spi1_default_alt: spi1_default_alt {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 14)>,
                <NRF_PSEL(SPIM_MOSI, 1, 13)>,
                <NRF_PSEL(SPIM_MISO, 1, 12)>;
        };
    };

    spi1_sleep_alt: spi1_sleep_alt {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 14)>,
                <NRF_PSEL(SPIM_MOSI, 1, 13)>,
                <NRF_PSEL(SPIM_MISO, 1, 12)>;
            low-power-enable;
        };
    };

    spi2_default_alt: spi2_default_alt {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 9)>,
                <NRF_PSEL(SPIM_MOSI, 1, 8)>;
        };
        group2 {
            psels = <NRF_PSEL(SPIM_MISO, 1, 7)>;
            bias-pull-down;
        };
    };

    spi2_sleep_alt: spi2_sleep_alt {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 9)>,
            <NRF_PSEL(SPIM_MOSI, 1, 8)>,
            <NRF_PSEL(SPIM_MISO, 1, 7)>;
            low-power-enable;
        };
    };

	spi4_default: spi4_default {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 8)>,
					<NRF_PSEL(SPIM_MOSI, 0, 9)>,
					<NRF_PSEL(SPIM_MISO, 0, 10)>;
		};
	};

	spi4_sleep: spi4_sleep {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 8)>,
					<NRF_PSEL(SPIM_MOSI, 0, 9)>,
					<NRF_PSEL(SPIM_MISO, 0, 10)>;
			low-power-enable;
		};
	};

	uart2_default_pcb: uart2_default_pcb {
        group1 {
            psels = <NRF_PSEL(UART_TX, 0, 20)>,  /* TX on P0.20 */
                    <NRF_PSEL(UART_RX, 0, 22)>;  /* RX on P0.22 */
        };
    };

    uart2_sleep_pcb: uart2_sleep_pcb {
        group1 {
            psels = <NRF_PSEL(UART_TX, 0, 20)>,
                    <NRF_PSEL(UART_RX, 0, 22)>;
            low-power-enable;
        };
    };
};



