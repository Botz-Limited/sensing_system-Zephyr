# Activity Session Data Specification

**Version:** 1.0  
**Date:** December 2024  
**Purpose:** Define a compact, analysis-ready data format for activity sessions that minimizes storage and transmission requirements while providing meaningful insights

---

## Table of Contents
1. [Overview](#overview)
2. [Activity Session Concept](#activity-session-concept)
3. [Proposed Session Data Format](#proposed-session-data-format)
4. [Real-Time Bluetooth Transmission](#real-time-bluetooth-transmission)
5. [Post-Activity Analysis File](#post-activity-analysis-file)
6. [Data Calculation Requirements](#data-calculation-requirements)
7. [Storage Estimates](#storage-estimates)
8. [Implementation Roadmap](#implementation-roadmap)

## Overview

### Current State
- **Raw Data Files**: 
  - Foot sensor: 8 channels @ high frequency
  - BHI360: Quaternion, gyro, linear acceleration @ high frequency
  - Step count: Periodic updates
- **Storage**: External flash with protobuf encoding
- **Transmission**: Full raw files transferred post-activity

### Proposed Enhancement
- **Activity Session File**: Compact, pre-processed data for immediate analysis
- **Real-time BLE Streaming**: Key metrics during activity
- **Reduced Storage**: ~90% reduction compared to raw data
- **Faster Transmission**: Minutes instead of hours

## Activity Session Concept

### Session Lifecycle

```mermaid
graph LR
    A[Start Activity] --> B[Initialize Session]
    B --> C[Collect & Process Data]
    C --> D[End Activity]
    D --> E[Save Summary]
    
    A -.->|Phone Command| A1[Trigger]
    B -.->|Create Header| B1[Metadata]
    C -.->|Calculate Features| C1[Analytics]
    D -.->|Phone Command| D1[Stop]
    E -.->|Transmit| E1[Results]
```

### Activity Types
1. **Running**: Focus on pace, cadence, ground contact time
2. **Walking**: Step count, symmetry, stability
3. **Training**: Form analysis, fatigue detection
4. **Recovery**: Gait quality, compensation patterns
5. **Custom**: User-defined metrics

## Proposed Session Data Format

### Session Header (Written Once)
```protobuf
message ActivitySessionHeader {
    uint32 session_id = 1;              // Unique session identifier
    uint32 start_timestamp = 2;         // Unix epoch time
    uint32 activity_type = 3;           // Enum: RUNNING, WALKING, etc.
    string firmware_version = 4;        // For compatibility
    uint32 user_weight_kg = 5;          // For force calculations
    uint32 user_height_cm = 6;          // For stride calculations
    DeviceInfo left_device = 7;         // Battery, calibration status
    DeviceInfo right_device = 8;        // Battery, calibration status
}
```

### Periodic Summary Records (Every 1-5 seconds)
```protobuf
message ActivitySummaryRecord {
    uint16 delta_time_ms = 1;           // Time since last record
    
    // Motion Metrics
    MotionMetrics motion = 2;
    
    // Foot Pressure Metrics  
    FootMetrics left_foot = 3;
    FootMetrics right_foot = 4;
    
    // Composite Metrics
    GaitMetrics gait = 5;
    
    // Event Flags
    uint32 event_flags = 6;             // Falls, stops, anomalies
}
```

### Motion Metrics Structure
```protobuf
message MotionMetrics {
    // Orientation (from quaternion)
    int16 pitch_degrees = 1;            // Forward/backward tilt
    int16 roll_degrees = 2;             // Side-to-side tilt
    int16 yaw_change_degrees = 3;       // Turn angle since last
    
    // Activity Intensity
    uint16 activity_intensity = 4;      // 0-1000 scale
    uint16 vertical_oscillation_mm = 5; // Bounce height
    uint16 impact_g = 6;                // Peak acceleration
    
    // Stability
    uint8 stability_score = 7;          // 0-100, higher is better
    uint8 smoothness_score = 8;         // 0-100, movement quality
}
```

### Foot Metrics Structure
```protobuf
message FootMetrics {
    // Pressure Distribution
    uint8 heel_pressure_percent = 1;    // 0-100
    uint8 midfoot_pressure_percent = 2; // 0-100
    uint8 forefoot_pressure_percent = 3;// 0-100
    uint16 total_pressure = 4;          // Relative units
    
    // Timing
    uint16 contact_time_ms = 5;         // Ground contact duration
    uint16 flight_time_ms = 6;          // Time in air
    uint16 step_frequency_spm = 7;      // Steps per minute
    
    // Loading
    uint16 loading_rate = 8;            // N/s normalized
    uint16 push_off_power = 9;          // Relative units
}
```

### Gait Metrics Structure
```protobuf
message GaitMetrics {
    // Symmetry (left vs right comparison)
    int8 contact_time_asymmetry = 1;    // -100 to +100 (negative=left longer)
    int8 pressure_asymmetry = 2;        // -100 to +100
    int8 step_length_asymmetry = 3;     // -100 to +100
    
    // Efficiency
    uint16 cadence_spm = 4;             // Steps per minute (both feet)
    uint16 stride_length_cm = 5;        // Estimated from IMU
    uint16 speed_cm_s = 6;              // Estimated speed
    
    // Quality
    uint8 gait_regularity = 7;          // 0-100, consistency
    uint8 coordination_score = 8;       // 0-100, L/R coordination
}
```

### Session Summary (Written Once at End)
```protobuf
message ActivitySessionSummary {
    uint32 end_timestamp = 1;
    uint32 duration_seconds = 2;
    
    // Aggregate Statistics
    AggregateStats motion_stats = 3;
    AggregateStats left_foot_stats = 4;
    AggregateStats right_foot_stats = 5;
    AggregateStats gait_stats = 6;
    
    // Key Performance Indicators
    uint32 total_steps = 7;
    uint32 total_distance_m = 8;
    uint16 average_pace_s_per_km = 9;
    uint16 calories_burned = 10;
    
    // Quality Metrics
    uint8 overall_form_score = 11;      // 0-100
    uint8 fatigue_index = 12;           // 0-100, higher = more fatigued
    uint8 injury_risk_score = 13;       // 0-100, higher = more risk
}
```

## Real-Time Bluetooth Transmission

### Live Metrics Characteristic (Notify every 1s)
```protobuf
message LiveActivityMetrics {
    uint32 elapsed_seconds = 1;
    uint16 current_pace_s_per_km = 2;
    uint16 current_cadence_spm = 3;
    uint16 current_heart_rate = 4;      // If available
    uint8 current_form_score = 5;
    uint8 fatigue_level = 6;
    uint32 total_steps = 7;
    uint16 current_power_watts = 8;     // Estimated
}
```

### Alert Notifications (Event-driven)
```protobuf
message ActivityAlert {
    uint32 timestamp = 1;
    enum AlertType {
        POOR_FORM = 0;
        HIGH_ASYMMETRY = 1;
        UNUSUAL_PATTERN = 2;
        HIGH_IMPACT = 3;
        FATIGUE_DETECTED = 4;
        FALL_DETECTED = 5;
    }
    AlertType type = 2;
    uint8 severity = 3;                 // 1-10
    string message = 4;                 // Brief description
}
```

## Post-Activity Analysis File

### File Structure

```mermaid
graph TD
    A[File Start] --> B[Header]
    B --> C[Summary Record 1<br/>@ 0-1s]
    C --> D[Summary Record 2<br/>@ 1-2s]
    D --> E[...]
    E --> F[Summary Record N<br/>@ N-1 to Ns]
    F --> G[Session Summary]
    G --> H[CRC32]
    H --> I[File End]
```

### Compression Strategy
- Use variable-length encoding for timestamps
- Delta encoding for sequential values
- Bit-packing for small ranges (0-100 values)
- Optional zlib compression for entire file

## Data Calculation Requirements

### From Foot Sensor (8 channels)

```mermaid
graph LR
    A[8 ADC Channels] --> B[Pressure Mapping]
    B --> C[Heel/Mid/Forefoot]
    
    A --> D[Timing Analysis]
    D --> E[Contact/Flight Time]
    
    A --> F[Force Metrics]
    F --> G[Loading Rate]
    F --> H[Push-off Power]
```

1. **Pressure Distribution**
   - Map 8 channels to anatomical regions (heel, midfoot, forefoot)
   - Calculate center of pressure trajectory
   - Detect contact/flight phases

2. **Timing Analysis**
   - Ground contact time per step
   - Flight time between steps
   - Step frequency calculation

3. **Force Metrics**
   - Total force (sum of channels)
   - Loading rate (force derivative)
   - Push-off power estimation

### From BHI360 (IMU)

```mermaid
graph LR
    A[Quaternion] --> B[Euler Angles]
    B --> C[Pitch/Roll/Yaw]
    
    A --> D[Linear Accel] --> E[Vertical Oscillation]
    D --> F[Impact Detection]
    
    A --> G[Gyroscope] --> H[Stability Score]
    G --> I[Turn Detection]
```

1. **Orientation Processing**
   - Quaternion to Euler angles
   - Remove drift using step detection
   - Track heading changes

2. **Motion Analysis**
   - Vertical oscillation from linear acceleration
   - Impact detection (peak acceleration)
   - Stability scoring (gyro variance)

3. **Distance/Speed Estimation**
   - Step length from acceleration patterns
   - Speed from step length × frequency
   - Total distance accumulation

### Combined Metrics
1. **Gait Symmetry**
   - Compare left/right timing
   - Compare left/right pressure patterns
   - Rolling asymmetry index

2. **Efficiency Indicators**
   - Vertical oscillation ratio
   - Ground contact time balance
   - Energy expenditure estimation

3. **Form Analysis**
   - Pronation/supination detection
   - Heel strike vs forefoot strike
   - Cadence optimization

## Storage Estimates

### Raw Data (Current)
- Foot sensor: 16 bytes × 100Hz × 2 feet = 3.2 KB/s
- BHI360: 28 bytes × 100Hz × 2 feet = 5.6 KB/s
- **Total Raw**: ~8.8 KB/s = 31.7 MB/hour

### Activity Session Data (Proposed)
- Summary record: ~64 bytes every 2 seconds = 32 bytes/s
- **Total Session**: 0.032 KB/s = 115 KB/hour
- **Compression**: ~50% = 58 KB/hour

### Storage Savings

```mermaid
graph LR
    A[Raw Data<br/>31.7 MB/hour] -->|99.8% Reduction| B[Session Data<br/>58 KB/hour]
    
    subgraph "Comparison"
        C[1 Hour Activity]
        D[Raw: 31.7 MB]
        E[Session: 58 KB]
        F[Ratio: 546:1]
    end
```

## Implementation Roadmap

### Phase 1: Core Infrastructure
1. Define protobuf messages
2. Create session manager module
3. Implement basic calculations
4. Add file writing logic

### Phase 2: Real-time Processing
1. Implement sliding window buffers
2. Add feature extraction algorithms
3. Create BLE characteristics
4. Test real-time performance

### Phase 3: Advanced Analytics
1. Machine learning models for form scoring
2. Fatigue detection algorithms
3. Injury risk assessment
4. Personalized recommendations

### Phase 4: Optimization
1. Power consumption optimization
2. Adaptive sampling rates
3. Compression improvements
4. Cloud integration

## Benefits Summary

### For Users
- **Instant Feedback**: Real-time form coaching
- **Quick Sync**: Minutes instead of hours
- **Better Insights**: Pre-processed, meaningful data
- **Lower Power**: Less BLE transmission time

### For Developers
- **Structured Data**: Well-defined schema
- **Extensible**: Easy to add new metrics
- **Testable**: Clear calculation pipeline
- **Maintainable**: Separated from raw data system

### For System
- **Storage Efficient**: 99%+ reduction
- **Network Friendly**: Small file sizes
- **Battery Saving**: Less transmission time
- **Scalable**: Handles long activities

## Conclusion

This activity session data format provides a comprehensive yet compact representation of athletic performance. By pre-processing data on-device, we can deliver immediate insights while dramatically reducing storage and transmission requirements. The format is designed to be extensible, allowing for future enhancements without breaking compatibility.