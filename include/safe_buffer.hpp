/**
 * @file safe_buffer.hpp
 * @brief
 * @version 1.0
 * @date 15/5/2025
 *
 * @copyright Botz Innovation 2025
 *
 */

/**
 *****************************************************************************************************************************************************
 *  \section HEADER_GUARD
 *****************************************************************************************************************************************************
 */
#ifndef SAFE_BUFFER_H_
#define SAFE_BUFFER_H_

#ifdef __cplusplus
extern "C"
{
#endif


/**
 *****************************************************************************************************************************************************
 *  \section INCLUDE FILES
 *****************************************************************************************************************************************************
 */
#include "chp_lib.hpp"


/**
 *****************************************************************************************************************************************************
 *  \section GLOBAL DEFINITIONS/MACROS
 *****************************************************************************************************************************************************
 */
#define SAFE_BUFFER_AVAILABLE_SPACE(buffer) (((buffer)->length == NULL) ? 0U : ((buffer)->max_length - *(buffer)->length))
#define SAFE_BUFFER(_name, _len, _max_len)       \
        {                                                \
            .buffer = (char_t*)(_name),                  \
            .max_length = (_max_len),                    \
            .length = (_len),                            \
        };


/**
 *****************************************************************************************************************************************************
 *  \section EXTERNAL TYPEDEFS
 *****************************************************************************************************************************************************
 */
#pragma pack(1)
typedef struct sSafeBuffer
{
    uint32_t max_length;        /* Space available in buffer          */
    uint32_t* length;           /* Length of buffer (in and/or out)   */
    char_t* buffer;             /* Pointer to data                    */
}
safe_buffer_t;
#pragma pack()


/**
 *****************************************************************************************************************************************************
 *  \section EXTERNAL VARIABLES
 *****************************************************************************************************************************************************
 */


/**
 *****************************************************************************************************************************************************
 *  \section EXTERNAL FUNCTION PROTOTYPES
 *****************************************************************************************************************************************************
 */
extern result_t safe_buffer_Valid(const safe_buffer_t* const target);
extern result_t safe_buffer_Copy(safe_buffer_t* const dest, const safe_buffer_t* const src, uint32_t len);
extern result_t safe_buffer_StringNullCopy(char_t* const dest, const char_t* const src, uint32_t len);
extern result_t safe_buffer_Append(safe_buffer_t* const dest, const safe_buffer_t* const src, uint32_t len);


#ifdef __cplusplus
}
#endif


#endif  /* SAFE_BUFFER_H_ */


/**
 *****************************************************************************************************************************************************
 *  END OF FILE
 *****************************************************************************************************************************************************
 */
